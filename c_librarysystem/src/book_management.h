
#ifndef BOOK_MANAGEMENT_GUARD__H
#define BOOK_MANAGEMENT_GUARD__H

#include <stdio.h>

struct Book {
    int id;
    char *title; //book title
    char *authors; //comma separated list of authors
    unsigned int year; // year of publication
    unsigned int copies; //number of copies the library has
};

struct BookArray {
    struct Book* array; // pointer to array of struct Book.
    unsigned int length; // number of elements in the struct Book *// BookArray::find_book_by_author(const char* title)
};


//saves the database of books in the specified file
//returns 0 if books were stored correctly, or an error code otherwise
int store_books(FILE *file);

//loads the database of books from the specified file
//the file must have been generated by a previous call to store_books()
//returns 0 if books were loaded correctly, or an error code otherwise
int load_books(FILE *file);

//adds a book to the ones available to the library
//returns 0 if the book could be added, or an error code otherwise
int add_book(struct Book book);

//removes a book from the library
//returns 0 if the book could be successfully removed, or an error code otherwise.
int remove_book(struct Book book);

//finds books with a given title.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
struct BookArray find_book_by_title (const char *title);

//finds books with the given authors.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
struct BookArray find_book_by_author (const char *author);

//finds books published in the given year.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
struct BookArray find_book_by_year (unsigned int year);


typedef struct BookArray BookArray;
typedef struct Book Book;

// Used as interface for the library admin. They can use this to exercise admin abilities
// The admin interface is in a loop which only exits when the Librarian logs outfile
// It connects all the functions in the book_management system
int admin_login();

// Used to read all the books in the text file into a Book array
// This is called upon after every book that is added/removed
int getBookOpen();

// Used to call upon store_books which is executed when the program finishes
int writeToFile(char *option, int type);

// Function validates Librarians inputs for adding a book
// This makes sure the right fields are added to the book which is then added to BookArray
int validateBook(char *title, char *authors, char *year, char *copies);

//Displays all the books in the Library system
//Reads all books in the BookArray
void displayAllBooks();

// Function called upon when adding a book to Library System.
int getBooks();

// Function displays search menu where admin/users can search for a specific book in the system
// This is then called upon when we are removing/borrowing books from the system
int displaySearchMenu();

// Displays the books user/admin has searched for
// Takes a BookArray as a parameter which holds the searched books
void displaySearchedBooks(struct BookArray BookArray);

// Takes Admins inputs and then adds them to a new book which can them be added to BookArray
Book *tempBook(char *title, char *authors, char *year, char *copies);

//finds books published with given ID.
//returns a Book structure, where the fields holds the Book Data or Book with ID=99 if no book with the
//provided ID can be found. Every other field is empty if no book can be found.
struct Book find_book_by_id (int bookID);

#endif
